import Cookies from 'js-cookie'
const defaultStorage = 'cookies' // ! 'cookies' / 'storage'
// @ cookies management
const cookiesSetCreds = (data) => Cookies.set('_jwtApiToken', data)
const cookiesGetCreds = () => Cookies.get('_jwtApiToken')
const cookiesRemoveCreds = () => Cookies.remove('_jwtApiToken')
// @ local-storage management
const storageSetCreds = (data) => localStorage.setItem('_jwtApiToken', data)
const storageGetCreds = () => localStorage.getItem('_jwtApiToken')
const storageRemoveCreds = () => localStorage.removeItem('_jwtApiToken')
// @ creds management core
const setCreds = (data) => {
  if (defaultStorage === 'cookies') cookiesSetCreds(data)
  else storageSetCreds(data)
}
const getCreds = () => {
  if (defaultStorage === 'cookies') return cookiesGetCreds()
  else return storageGetCreds()
}
const removeCreds = () => {
  if (defaultStorage === 'cookies') return cookiesRemoveCreds()
  else return storageRemoveCreds()
}
// @ real creds engine
const credMng = {
  credentialKeySave: (data, rmb = '') => setCreds(data),
  credentialKeyTake: () => getCreds(),
  credentialKeyRemove: () => removeCreds(),
  axiosHeaderToken: () => { return { headers: { Authorization: `Bearer ${getCreds()}` } } }
}
export default credMng
