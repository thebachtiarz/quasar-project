import { Cookies } from 'quasar'
const defaultStorage = 'storage' // ! 'cookie' / 'storage'
const defaultName = '_histAcc'

// ! helper
const getKey = (data, key, search) => {
    let foundKey = '';
    data.forEach((elm, idx) => {
        if (elm.username == search) foundKey = idx
    })
    return foundKey
}
// ! cookie method
// ?: set logins
const cookieSetLogin = (data) => {
    // todo: push data
}
// ?: get saved logins
const cookieGetLogin = () => {
    // @: get data
    return Cookies.get(defaultName)
}
// ?: count saved logins
const cookieCountLogin = () => {
    // @: count data
    return cookieGetLogin() ? cookieGetLogin().length : 0
}
// ?: delete saved logins
const cookieDeleteLogin = (key) => {
    // todo: delete selected or all data
}
// ! storage method
// ?: set logins
const storageSetLogin = (data) => {
    // todo: push data
    if (storageCountLogin()) {
        // have login
        let savedLogin = storageGetLogin()
        let checkUsername = []
        savedLogin.forEach(elm => checkUsername.push(elm.username))
        if (checkUsername.includes(data.username)) {
            // update saved login
            // { name: '', profile_img: '', username: '', password: '' }
            let updateKey = getKey(savedLogin, 'username', data.username)
            savedLogin[updateKey] = { name: data.name, profile_img: data.profile_img, username: data.username, password: data.password }
        } else {
            savedLogin.push(data)
        }
        localStorage.setItem(defaultName, JSON.stringify(savedLogin))
    } else {
        localStorage.setItem(defaultName, [data])
    }
}
// ?: get saved logins
const storageGetLogin = () => {
    // @: get data
    return JSON.parse(localStorage.getItem(defaultName))
}
// ?: count saved logins
const storageCountLogin = () => {
    // @: count data
    return storageGetLogin() ? storageGetLogin().length : 0
}
// ?: delete saved logins
const storageDeleteLogin = (key) => {
    // todo: delete selected or all data
}
// @ core engine
const setLogin = (data) => {
    if (defaultStorage === 'cookie') return cookieSetLogin(data)
    else if (defaultStorage === 'storage') return storageSetLogin(data)
}
const getLogin = () => {
    if (defaultStorage === 'cookie') return cookieGetLogin()
    else if (defaultStorage === 'storage') return storageGetLogin()
}
const countLogin = () => {
    if (defaultStorage === 'cookie') return cookieCountLogin()
    else if (defaultStorage === 'storage') return storageCountLogin()
}
const removeLogin = (key) => {
    if (defaultStorage === 'cookie') return cookieDeleteLogin(key)
    else if (defaultStorage === 'storage') return storageDeleteLogin()
}
// @ main engine
const SavedLogin = {
    loginSave: (data) => setLogin(data),
    loginTake: () => getLogin(),
    loginCount: () => countLogin(),
    loginRemove: (key) => removeLogin(key),
}
export default SavedLogin;