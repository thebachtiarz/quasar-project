import { Cookies } from 'quasar'
import Forge from 'src/third-party/library/forgejs.min'
const defaultStorage = 'storage' // ! 'cookie' / 'storage'
const defaultName = '_histAcc'
const useSecurity = false
// ! helper
// ?: get key from array
const getKey = (data, key, search) => {
    let foundKey = ''
    data.forEach((elm, idx) => {
        if (elm.username == search) foundKey = idx
    })
    return foundKey
}
// ?: get value key return as array
const getArrayKey = (data, keyNeed) => {
    let result = []
    data.forEach(elm => result.push(elm[keyNeed]))
    return result
}
// ?: array filter
const arrayFilter = (data, key) => {
    return data.filter((elm, idx) => idx !== key)
}
// ?: security usage
const secureData = (data) => useSecurity && data ? Forge.encryptData(data) : (defaultStorage === 'storage' ? JSON.stringify(data) : data)
const decureData = (data) => useSecurity && data ? Forge.decryptData(data) : (defaultStorage === 'storage' ? JSON.parse(data) : data)
// @ process engine
// ! cookie method
// ?: set logins
const cookieSetLogin = (data) => {
    if (cookieCountLogin()) {
        let savedLogin = cookieGetLogin()
        let checkUsername = getArrayKey(savedLogin, 'username')
        if (checkUsername.includes(data.username)) {
            let updateKey = getKey(savedLogin, 'username', data.username)
            savedLogin[updateKey] = { name: data.name, profile_img: data.profile_img, username: data.username, password: data.password }
        } else {
            savedLogin.push(data)
        }
        Cookies.set(defaultName, secureData(savedLogin))
    } else {
        Cookies.set(defaultName, secureData([data]))
    }
}
// ?: get saved logins
const cookieGetLogin = () => {
    return decureData(Cookies.get(defaultName))
}
// ?: count saved logins
const cookieCountLogin = () => {
    return cookieGetLogin() ? cookieGetLogin().length : 0
}
// ?: delete saved logins
const cookieDeleteLogin = (key) => {
    let savedLogin = cookieGetLogin()
    if (key == 'all') {
        Cookies.remove(defaultName)
    } else {
        let filterLogin = arrayFilter(savedLogin, key)
        Cookies.set(defaultName, secureData(filterLogin))
    }
}
// ! storage method
// ?: set logins
const storageSetLogin = (data) => {
    if (storageCountLogin()) {
        let savedLogin = storageGetLogin()
        let checkUsername = getArrayKey(savedLogin, 'username')
        if (checkUsername.includes(data.username)) {
            let updateKey = getKey(savedLogin, 'username', data.username)
            savedLogin[updateKey] = { name: data.name, profile_img: data.profile_img, username: data.username, password: data.password }
        } else {
            savedLogin.push(data)
        }
        localStorage.setItem(defaultName, secureData(savedLogin))
    } else {
        localStorage.setItem(defaultName, secureData([data]))
    }
}
// ?: get saved logins
const storageGetLogin = () => {
    // console.log(decureData(localStorage.getItem(defaultName)))
    return decureData(localStorage.getItem(defaultName))
}
// ?: count saved logins
const storageCountLogin = () => {
    return storageGetLogin() ? storageGetLogin().length : 0
}
// ?: delete saved logins
const storageDeleteLogin = (key) => {
    let savedLogin = storageGetLogin()
    if (key == 'all') {
        localStorage.removeItem(defaultName)
    } else {
        let filterLogin = arrayFilter(savedLogin, key)
        localStorage.setItem(defaultName, secureData(filterLogin))
    }
}
// @ core engine
const setLogin = (data) => {
    if (defaultStorage === 'cookie') return cookieSetLogin(data)
    else if (defaultStorage === 'storage') return storageSetLogin(data)
}
const getLogin = () => {
    if (defaultStorage === 'cookie') return cookieGetLogin()
    else if (defaultStorage === 'storage') return storageGetLogin()
}
const countLogin = () => {
    if (defaultStorage === 'cookie') return cookieCountLogin()
    else if (defaultStorage === 'storage') return storageCountLogin()
}
const removeLogin = (key) => {
    if (defaultStorage === 'cookie') return cookieDeleteLogin(key)
    else if (defaultStorage === 'storage') return storageDeleteLogin(key)
}
// @ main engine
const SavedLogin = {
    loginSave: (data) => setLogin(data),
    loginTake: () => getLogin(),
    loginCount: () => countLogin(),
    loginRemove: (key) => removeLogin(key),
}
export default SavedLogin