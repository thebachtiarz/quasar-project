import forge from 'node-forge'

/**
 * key using RSA-KEM
 * method : forge.pki.privateKeyToPem(forge.pki.rsa.generateKeyPair({ bits: 2048, workers: -1 }).privateKey)
 */
const privateKey = '-----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEAoe4GE9A1APJ8gkdrgX0Fw8RpvigctF8jUUzf2lAI7fAFhdge EJLk4EaNQ763TbqpdeELeu+DG/doiSnj9pWzrIBjmhcTOMMhMF4OLzFCBFVO+rX+ ZYdmgv1jgPZxPb5ovzJPNV10DRb0CQfm89HAa75N5G9FDDMvEA8xhrewomAme/EV d0BvdMjIFsltVHBEyjpCZ0h5qp8wcLTvA3RXmNrovrp/ZUoMu1PV0dG/OiKkyT8S OwHAhL+tTh2sHCWH7pUwDqdkmuFKRkycKc9eJwMLNnnK+b4PzSFfVQ3qz0FMBZy8 VSZOak/VhBVgeiUXGdgqLWr1qYR2GUXRuRXISQIDAQABAoIBAH766EkhPG9Bt+Fx oBwqrhqWK1Wyns/Syx816VSI7nengK00jF7y0ggNSzmUlKmfdsO5dgcxSt7jZFYr Q1hajEr5YyGydqBMY/pJx1W6ispbG1P+4z86rmiJyz2WA7cnWXyVNwfiAN9C4Js0 VydblEjpMquvlbW7bWxqfavm39xzymFFHFpFM85KSel652qXE6ghqQlxA29laJgJ 0aWVtZ21ajarge3SoPuSrv6YW+HYnKBmIjY3/o7YKMGeSyiLoNAnehyhAcVkQjKP MVM9LqxMKMnenhjydmesOT8Ub8BDeX9qSqsGj1syRy4oYNceofp46fu6ev++LXoS TO9XDAECgYEAzh9NfzROi98Wbj/gD6iFNUsA0amzpMvBWIoC0wPCN2mBjefkVC7/ Rotg7Tkf7N/qsFT/phSaLYXr7aw7C6KQWHJ3M0E7av4p1FUpFmj/IMNDWiudSNAk 5YraCEbSmLtIYW2LksH+SbPa3o99YvQhE985TyCPHmgiOsMgF9F5Ea0CgYEAyR0e qEbsFJVjKrelDr11v8y/QLSGa9KMbcCBwyKReOASONOKVIfNuqO8f/FJHzaR3Yj0 zygv1t3giua2P9fV2y6bOf4QU6R/UDWYWE+5mFxxKR86W090G3a1e4CdR3RQnmKl /m4W1LlRZ/gutcuEhnONdWh+KJROjzh/6becvI0CgYBV2XPNp1uPpjsRcElCPE4/ BB4zNRs9aB//YHwMp2Qc8DSlhg/zgB+Sojqck05YumplRwGziqEslLrPIwz0q6Cz Nfmvv1ugFHwXk+CpFNIuMyW6SLAZw5eag1qMV/Me6eIbsiSP23yt9dsTF3CB5mxg enjEHCt/3p9jGiIjyXtDgQKBgQDDr2ndIuUjQhgzwG0CYqbn8TlGpGEHGN87C003 qbMSgjQ4xtyaU2mCaT9I3mXf0SEtBc3uo5Oo5ktN3B8JD+IuWrL/Qo5wVGbsjLmn dCuKbKhO8uu9XRoEfwUnHoXquOqYsjQB1OyyH39uQrZwfY59pIHH89yNb4DhKoCL 0PTZIQKBgAm3zvWrycWCS7HB1gY71+8yF2OxRhNLwRRkfwGHNChN5HztVyIt+qBC 6VmJvU884cvDA32EoJ8qCHc0rWd7tEUGDmlpZfWvlairSlLy8erhcJnMsf+55Mvu /FMKluYR4IuIvJTpoJbG/sXlaYsfXpRDqgb0Ra/kjvXrrhjqAJGe -----END RSA PRIVATE KEY-----'
const privateKeyBlob = forge.pki.privateKeyFromPem(privateKey)

// @ data encryption
const encryptRSA = (data) => {
  const publicKeyBlob = forge.pki.setRsaPublicKey(privateKeyBlob.n, privateKeyBlob.e)
  let letsEncrypt = publicKeyBlob.encrypt(forge.util.encodeUtf8(JSON.stringify(data)))
  return letsEncrypt
}

const decryptRSA = (data) => {
  let letsDecrypt = forge.util.decodeUtf8(privateKeyBlob.decrypt(data))
  return JSON.parse(letsDecrypt)
}

// @ password encryption
const encryptSHA384 = (data) => {
  const sha384 = forge.md.sha384.create()
  sha384.update(data)
  return sha384.digest().toHex()
}

const encryptSHA512 = (data) => {
  const sha512 = forge.md.sha512.create()
  sha512.update(data)
  return sha512.digest().toHex()
}

/**
 * main function
 */
var ForgeJs = {
  encryptPassword: (password) => encryptSHA512(encryptSHA384(password)),
  encryptData: (data) => encryptRSA(data),
  decryptData: (data) => decryptRSA(data)
}
export default ForgeJs
