// 
const longPage = 7

const getLapPosition = (maxPage, currentPage) => {
    var defPosLap = 1
    var finish = false
    if (currentPage <= maxPage) {
        while (!finish) {
            if ((currentPage > (longPage * (defPosLap - 1))) && (currentPage <= (longPage * defPosLap))) finish = true
            else defPosLap++
        }
    }
    return defPosLap
}

const separatePages = (maxPage, currentPage) => {
    if (currentPage >= maxPage) currentPage = maxPage
    if (maxPage == 0) maxPage = 1
    const posLap = getLapPosition(maxPage, currentPage)
    var prevMaxLap = longPage * (posLap - 1)
    const posInLap = currentPage - prevMaxLap
    let arrPage = []
    for (let i = (prevMaxLap + 1); i < (prevMaxLap + posInLap); i++) arrPage.push(i)
    arrPage.push(currentPage)
    for (let j = (currentPage + 1); j <= (longPage * posLap); j++) if (j <= maxPage) arrPage.push(j)
    if (arrPage.length <= longPage) {
        let valueNeed = longPage - arrPage.length
        let valueFill = arrPage[0] - 1
        while (arrPage.length < longPage) {
            arrPage.unshift(valueFill > 0 ? valueFill : 1)
            valueFill--
            valueNeed--
        }
        arrPage = [...new Set(arrPage.sort((a, b) => a - b))]
    }
    return arrPage
}

var PaginateHelper = {
    getPaginate: (maxPage, currentPage) => separatePages(Number(parseInt(maxPage)), Number(parseInt(currentPage)))
}

export default PaginateHelper