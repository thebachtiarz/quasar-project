const AxiosResponse = {
    catchError (err) {
        let errorResp = err.response || ''
        let errorData = errorResp ? (stringEscape(errorResp.data.message) ? '' : errorResp.data.message) : ''
        let errorText = errorResp ? (stringEscape(errorResp.statusText) ? '' : errorResp.statusText) : ''
        let errorMesg = stringEscape(err.message) ? '' : err.message
        let errorCath = errorAnalize(err)
        return errorData ? errorData : (errorText ? errorText : (errorMesg ? errorMesg : errorCath))
    }
}

const stringEscape = (str) => {
    let strEscape = ['Cannot', 'undefined']
    let condition = false
    strEscape.forEach(ch => condition = str.search(ch) ? true : false)
    return condition
}

const errorAnalize = (err) => {
    try {
        let errCode = err.response.status
        return arrHttpResponse(errCode.toString())
    } catch (e) {
        return 'Something bad is happening, but by the way, please check your connection first'
    }
}

const arrHttpResponse = (code) => {
    // ? source : https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html
    let arrData = { '400': 'Bad Request', '401': 'Please login first!', '402': 'Payment Required', '403': 'Forbidden', '404': 'Request Not Found', '405': 'Method Not Allowed', '406': 'Not Acceptable', '407': 'Proxy Authentication Required', '408': 'Request Time-out', '409': 'Conflict', '410': 'Gone', '411': 'Length Required', '412': 'Precondition Failed', '413': 'Request Entity Too Large', '414': 'Request-URI Too Large', '415': 'Unsupported Media Type', '416': 'Requested range not satisfiable', '417': 'Expectation Failed', '500': 'Internal Server Error', '501': 'Not Implemented', '502': 'Bad Gateway', '503': 'Service Unavailable', '504': 'Gateway Time-out', '505': 'HTTP Version not supported', }
    return arrData[code] || 'Oops, Something went wrong!'
}


export default AxiosResponse